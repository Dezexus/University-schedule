/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BellSchedule } from "./BellSchedule";
import { BellScheduleCountArgs } from "./BellScheduleCountArgs";
import { BellScheduleFindManyArgs } from "./BellScheduleFindManyArgs";
import { BellScheduleFindUniqueArgs } from "./BellScheduleFindUniqueArgs";
import { CreateBellScheduleArgs } from "./CreateBellScheduleArgs";
import { UpdateBellScheduleArgs } from "./UpdateBellScheduleArgs";
import { DeleteBellScheduleArgs } from "./DeleteBellScheduleArgs";
import { BellScheduleService } from "../bellSchedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BellSchedule)
export class BellScheduleResolverBase {
  constructor(
    protected readonly service: BellScheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "read",
    possession: "any",
  })
  async _bellSchedulesMeta(
    @graphql.Args() args: BellScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BellSchedule])
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "read",
    possession: "any",
  })
  async bellSchedules(
    @graphql.Args() args: BellScheduleFindManyArgs
  ): Promise<BellSchedule[]> {
    return this.service.bellSchedules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BellSchedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "read",
    possession: "own",
  })
  async bellSchedule(
    @graphql.Args() args: BellScheduleFindUniqueArgs
  ): Promise<BellSchedule | null> {
    const result = await this.service.bellSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BellSchedule)
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "create",
    possession: "any",
  })
  async createBellSchedule(
    @graphql.Args() args: CreateBellScheduleArgs
  ): Promise<BellSchedule> {
    return await this.service.createBellSchedule({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BellSchedule)
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "update",
    possession: "any",
  })
  async updateBellSchedule(
    @graphql.Args() args: UpdateBellScheduleArgs
  ): Promise<BellSchedule | null> {
    try {
      return await this.service.updateBellSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BellSchedule)
  @nestAccessControl.UseRoles({
    resource: "BellSchedule",
    action: "delete",
    possession: "any",
  })
  async deleteBellSchedule(
    @graphql.Args() args: DeleteBellScheduleArgs
  ): Promise<BellSchedule | null> {
    try {
      return await this.service.deleteBellSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
