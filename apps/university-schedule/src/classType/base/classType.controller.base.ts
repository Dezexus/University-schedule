/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClassTypeService } from "../classType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClassTypeCreateInput } from "./ClassTypeCreateInput";
import { ClassType } from "./ClassType";
import { ClassTypeFindManyArgs } from "./ClassTypeFindManyArgs";
import { ClassTypeWhereUniqueInput } from "./ClassTypeWhereUniqueInput";
import { ClassTypeUpdateInput } from "./ClassTypeUpdateInput";
import { NewClassTypeUpdateInput } from "../NewClassTypeUpdateInput";
import { NewClassTypeCreateInput } from "../NewClassTypeCreateInput";
import { NewClassTypeWhereUniqueInput } from "../NewClassTypeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClassTypeControllerBase {
  constructor(
    protected readonly service: ClassTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClassType })
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createClassType(
    @common.Body() data: ClassTypeCreateInput
  ): Promise<ClassType> {
    return await this.service.createClassType({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ClassType] })
  @ApiNestedQuery(ClassTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async classTypes(@common.Req() request: Request): Promise<ClassType[]> {
    const args = plainToClass(ClassTypeFindManyArgs, request.query);
    return this.service.classTypes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClassType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async classType(
    @common.Param() params: ClassTypeWhereUniqueInput
  ): Promise<ClassType | null> {
    const result = await this.service.classType({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClassType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateClassType(
    @common.Param() params: ClassTypeWhereUniqueInput,
    @common.Body() data: ClassTypeUpdateInput
  ): Promise<ClassType | null> {
    try {
      return await this.service.updateClassType({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClassType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteClassType(
    @common.Param() params: ClassTypeWhereUniqueInput
  ): Promise<ClassType | null> {
    try {
      return await this.service.deleteClassType({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/classtypes")
  @swagger.ApiOkResponse({
    type: NewClassTypeCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateClassType(
    @common.Body()
    body: NewClassTypeUpdateInput
  ): Promise<NewClassTypeCreateInput> {
    return this.service.CreateClassType(body);
  }

  @common.Delete("/classtypes/:id")
  @swagger.ApiOkResponse({
    type: NewClassTypeWhereUniqueInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteClassType(
    @common.Body()
    body: NewClassTypeUpdateInput
  ): Promise<NewClassTypeWhereUniqueInput> {
    return this.service.DeleteClassType(body);
  }

  @common.Patch("/classtypes/:id")
  @swagger.ApiOkResponse({
    type: NewClassTypeUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateClassType(
    @common.Body()
    body: NewClassTypeUpdateInput
  ): Promise<NewClassTypeUpdateInput> {
    return this.service.UpdateClassType(body);
  }
}
