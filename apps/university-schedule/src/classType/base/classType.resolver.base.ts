/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClassType } from "./ClassType";
import { ClassTypeCountArgs } from "./ClassTypeCountArgs";
import { ClassTypeFindManyArgs } from "./ClassTypeFindManyArgs";
import { ClassTypeFindUniqueArgs } from "./ClassTypeFindUniqueArgs";
import { CreateClassTypeArgs } from "./CreateClassTypeArgs";
import { UpdateClassTypeArgs } from "./UpdateClassTypeArgs";
import { DeleteClassTypeArgs } from "./DeleteClassTypeArgs";
import { NewClassTypeCreateInput } from "../NewClassTypeCreateInput";
import { NewClassTypeWhereUniqueInput } from "../NewClassTypeWhereUniqueInput";
import { NewClassTypeUpdateInput } from "../NewClassTypeUpdateInput";
import { ClassTypeService } from "../classType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClassType)
export class ClassTypeResolverBase {
  constructor(
    protected readonly service: ClassTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "read",
    possession: "any",
  })
  async _classTypesMeta(
    @graphql.Args() args: ClassTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClassType])
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "read",
    possession: "any",
  })
  async classTypes(
    @graphql.Args() args: ClassTypeFindManyArgs
  ): Promise<ClassType[]> {
    return this.service.classTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClassType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "read",
    possession: "own",
  })
  async classType(
    @graphql.Args() args: ClassTypeFindUniqueArgs
  ): Promise<ClassType | null> {
    const result = await this.service.classType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClassType)
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "create",
    possession: "any",
  })
  async createClassType(
    @graphql.Args() args: CreateClassTypeArgs
  ): Promise<ClassType> {
    return await this.service.createClassType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClassType)
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "update",
    possession: "any",
  })
  async updateClassType(
    @graphql.Args() args: UpdateClassTypeArgs
  ): Promise<ClassType | null> {
    try {
      return await this.service.updateClassType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClassType)
  @nestAccessControl.UseRoles({
    resource: "ClassType",
    action: "delete",
    possession: "any",
  })
  async deleteClassType(
    @graphql.Args() args: DeleteClassTypeArgs
  ): Promise<ClassType | null> {
    try {
      return await this.service.deleteClassType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewClassTypeCreateInput)
  async CreateClassType(
    @graphql.Args()
    args: NewClassTypeCreateInput
  ): Promise<NewClassTypeCreateInput> {
    return this.service.CreateClassType(args);
  }

  @graphql.Mutation(() => NewClassTypeWhereUniqueInput)
  async DeleteClassType(
    @graphql.Args()
    args: NewClassTypeWhereUniqueInput
  ): Promise<NewClassTypeWhereUniqueInput> {
    return this.service.DeleteClassType(args);
  }

  @graphql.Mutation(() => NewClassTypeUpdateInput)
  async UpdateClassType(
    @graphql.Args()
    args: NewClassTypeUpdateInput
  ): Promise<NewClassTypeUpdateInput> {
    return this.service.UpdateClassType(args);
  }
}
