/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClassType as PrismaClassType } from "@prisma/client";
import { NewClassTypeCreateInput } from "../NewClassTypeCreateInput";
import { NewClassTypeWhereUniqueInput } from "../NewClassTypeWhereUniqueInput";
import { NewClassTypeUpdateInput } from "../NewClassTypeUpdateInput";

export class ClassTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClassTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.classType.count(args);
  }

  async classTypes(
    args: Prisma.ClassTypeFindManyArgs
  ): Promise<PrismaClassType[]> {
    return this.prisma.classType.findMany(args);
  }
  async classType(
    args: Prisma.ClassTypeFindUniqueArgs
  ): Promise<PrismaClassType | null> {
    return this.prisma.classType.findUnique(args);
  }
  async createClassType(
    args: Prisma.ClassTypeCreateArgs
  ): Promise<PrismaClassType> {
    return this.prisma.classType.create(args);
  }
  async updateClassType(
    args: Prisma.ClassTypeUpdateArgs
  ): Promise<PrismaClassType> {
    return this.prisma.classType.update(args);
  }
  async deleteClassType(
    args: Prisma.ClassTypeDeleteArgs
  ): Promise<PrismaClassType> {
    return this.prisma.classType.delete(args);
  }
  async CreateClassType(
    args: NewClassTypeCreateInput
  ): Promise<NewClassTypeCreateInput> {
    throw new Error("Not implemented");
  }
  async DeleteClassType(
    args: NewClassTypeWhereUniqueInput
  ): Promise<NewClassTypeWhereUniqueInput> {
    throw new Error("Not implemented");
  }
  async UpdateClassType(
    args: NewClassTypeUpdateInput
  ): Promise<NewClassTypeUpdateInput> {
    throw new Error("Not implemented");
  }
}
