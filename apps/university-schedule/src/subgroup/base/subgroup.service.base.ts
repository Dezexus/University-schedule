/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Subgroup as PrismaSubgroup,
  ClassModel as PrismaClassModel,
  Group as PrismaGroup,
} from "@prisma/client";

import { NewSubgroupInputCreate } from "../NewSubgroupInputCreate";
import { NewSubgroupInputUnique } from "../NewSubgroupInputUnique";
import { NewSubgroupInputUpdate } from "../NewSubgroupInputUpdate";

export class SubgroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SubgroupCountArgs, "select">): Promise<number> {
    return this.prisma.subgroup.count(args);
  }

  async subgroups(
    args: Prisma.SubgroupFindManyArgs
  ): Promise<PrismaSubgroup[]> {
    return this.prisma.subgroup.findMany(args);
  }
  async subgroup(
    args: Prisma.SubgroupFindUniqueArgs
  ): Promise<PrismaSubgroup | null> {
    return this.prisma.subgroup.findUnique(args);
  }
  async createSubgroup(
    args: Prisma.SubgroupCreateArgs
  ): Promise<PrismaSubgroup> {
    return this.prisma.subgroup.create(args);
  }
  async updateSubgroup(
    args: Prisma.SubgroupUpdateArgs
  ): Promise<PrismaSubgroup> {
    return this.prisma.subgroup.update(args);
  }
  async deleteSubgroup(
    args: Prisma.SubgroupDeleteArgs
  ): Promise<PrismaSubgroup> {
    return this.prisma.subgroup.delete(args);
  }

  async findClasses(
    parentId: string,
    args: Prisma.ClassModelFindManyArgs
  ): Promise<PrismaClassModel[]> {
    return this.prisma.subgroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .classes(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.subgroup
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }
  async CreateSubgroup(
    args: NewSubgroupInputCreate
  ): Promise<NewSubgroupInputCreate> {
    throw new Error("Not implemented");
  }
  async DeleteSubgroup(
    args: NewSubgroupInputUnique
  ): Promise<NewSubgroupInputUnique> {
    throw new Error("Not implemented");
  }
  async UpdateSubgroup(
    args: NewSubgroupInputUpdate
  ): Promise<NewSubgroupInputUpdate> {
    throw new Error("Not implemented");
  }
}
