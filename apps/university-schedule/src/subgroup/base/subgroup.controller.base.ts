/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SubgroupService } from "../subgroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SubgroupCreateInput } from "./SubgroupCreateInput";
import { Subgroup } from "./Subgroup";
import { SubgroupFindManyArgs } from "./SubgroupFindManyArgs";
import { SubgroupWhereUniqueInput } from "./SubgroupWhereUniqueInput";
import { SubgroupUpdateInput } from "./SubgroupUpdateInput";
import { ClassModelFindManyArgs } from "../../classModel/base/ClassModelFindManyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { ClassModelWhereUniqueInput } from "../../classModel/base/ClassModelWhereUniqueInput";
import { NewSubgroupInputUpdate } from "../NewSubgroupInputUpdate";
import { NewSubgroupInputCreate } from "../NewSubgroupInputCreate";
import { NewSubgroupInputUnique } from "../NewSubgroupInputUnique";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SubgroupControllerBase {
  constructor(
    protected readonly service: SubgroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Subgroup })
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSubgroup(
    @common.Body() data: SubgroupCreateInput
  ): Promise<Subgroup> {
    return await this.service.createSubgroup({
      data: {
        ...data,

        group: data.group
          ? {
              connect: data.group,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Subgroup] })
  @ApiNestedQuery(SubgroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subgroups(@common.Req() request: Request): Promise<Subgroup[]> {
    const args = plainToClass(SubgroupFindManyArgs, request.query);
    return this.service.subgroups({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Subgroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async subgroup(
    @common.Param() params: SubgroupWhereUniqueInput
  ): Promise<Subgroup | null> {
    const result = await this.service.subgroup({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,

        group: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Subgroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSubgroup(
    @common.Param() params: SubgroupWhereUniqueInput,
    @common.Body() data: SubgroupUpdateInput
  ): Promise<Subgroup | null> {
    try {
      return await this.service.updateSubgroup({
        where: params,
        data: {
          ...data,

          group: data.group
            ? {
                connect: data.group,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Subgroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSubgroup(
    @common.Param() params: SubgroupWhereUniqueInput
  ): Promise<Subgroup | null> {
    try {
      return await this.service.deleteSubgroup({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,

          group: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/classes")
  @ApiNestedQuery(ClassModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  async findClasses(
    @common.Req() request: Request,
    @common.Param() params: SubgroupWhereUniqueInput
  ): Promise<ClassModel[]> {
    const query = plainToClass(ClassModelFindManyArgs, request.query);
    const results = await this.service.findClasses(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,

        subject: {
          select: {
            id: true,
          },
        },

        room: {
          select: {
            id: true,
          },
        },

        typeField: true,
        teacher: true,

        subgroup: {
          select: {
            id: true,
          },
        },

        dayOfWeek: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "update",
    possession: "any",
  })
  async connectClasses(
    @common.Param() params: SubgroupWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        connect: body,
      },
    };
    await this.service.updateSubgroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "update",
    possession: "any",
  })
  async updateClasses(
    @common.Param() params: SubgroupWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        set: body,
      },
    };
    await this.service.updateSubgroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/classes")
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "update",
    possession: "any",
  })
  async disconnectClasses(
    @common.Param() params: SubgroupWhereUniqueInput,
    @common.Body() body: ClassModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      classes: {
        disconnect: body,
      },
    };
    await this.service.updateSubgroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/subgroups")
  @swagger.ApiOkResponse({
    type: NewSubgroupInputCreate,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateSubgroup(
    @common.Body()
    body: NewSubgroupInputUpdate
  ): Promise<NewSubgroupInputCreate> {
    return this.service.CreateSubgroup(body);
  }

  @common.Delete("/subgroups/:id")
  @swagger.ApiOkResponse({
    type: NewSubgroupInputUnique,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteSubgroup(
    @common.Body()
    body: NewSubgroupInputUpdate
  ): Promise<NewSubgroupInputUnique> {
    return this.service.DeleteSubgroup(body);
  }

  @common.Patch("/subgroups/:id")
  @swagger.ApiOkResponse({
    type: NewSubgroupInputUpdate,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateSubgroup(
    @common.Body()
    body: NewSubgroupInputUpdate
  ): Promise<NewSubgroupInputUpdate> {
    return this.service.UpdateSubgroup(body);
  }
}
