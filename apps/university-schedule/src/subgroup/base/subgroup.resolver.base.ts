/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Subgroup } from "./Subgroup";
import { SubgroupCountArgs } from "./SubgroupCountArgs";
import { SubgroupFindManyArgs } from "./SubgroupFindManyArgs";
import { SubgroupFindUniqueArgs } from "./SubgroupFindUniqueArgs";
import { CreateSubgroupArgs } from "./CreateSubgroupArgs";
import { UpdateSubgroupArgs } from "./UpdateSubgroupArgs";
import { DeleteSubgroupArgs } from "./DeleteSubgroupArgs";
import { ClassModelFindManyArgs } from "../../classModel/base/ClassModelFindManyArgs";
import { ClassModel } from "../../classModel/base/ClassModel";
import { Group } from "../../group/base/Group";
import { NewSubgroupInputCreate } from "../NewSubgroupInputCreate";
import { NewSubgroupInputUnique } from "../NewSubgroupInputUnique";
import { NewSubgroupInputUpdate } from "../NewSubgroupInputUpdate";
import { SubgroupService } from "../subgroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Subgroup)
export class SubgroupResolverBase {
  constructor(
    protected readonly service: SubgroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "read",
    possession: "any",
  })
  async _subgroupsMeta(
    @graphql.Args() args: SubgroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Subgroup])
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "read",
    possession: "any",
  })
  async subgroups(
    @graphql.Args() args: SubgroupFindManyArgs
  ): Promise<Subgroup[]> {
    return this.service.subgroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Subgroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "read",
    possession: "own",
  })
  async subgroup(
    @graphql.Args() args: SubgroupFindUniqueArgs
  ): Promise<Subgroup | null> {
    const result = await this.service.subgroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subgroup)
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "create",
    possession: "any",
  })
  async createSubgroup(
    @graphql.Args() args: CreateSubgroupArgs
  ): Promise<Subgroup> {
    return await this.service.createSubgroup({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Subgroup)
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "update",
    possession: "any",
  })
  async updateSubgroup(
    @graphql.Args() args: UpdateSubgroupArgs
  ): Promise<Subgroup | null> {
    try {
      return await this.service.updateSubgroup({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Subgroup)
  @nestAccessControl.UseRoles({
    resource: "Subgroup",
    action: "delete",
    possession: "any",
  })
  async deleteSubgroup(
    @graphql.Args() args: DeleteSubgroupArgs
  ): Promise<Subgroup | null> {
    try {
      return await this.service.deleteSubgroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClassModel], { name: "classes" })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  async findClasses(
    @graphql.Parent() parent: Subgroup,
    @graphql.Args() args: ClassModelFindManyArgs
  ): Promise<ClassModel[]> {
    const results = await this.service.findClasses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(@graphql.Parent() parent: Subgroup): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewSubgroupInputCreate)
  async CreateSubgroup(
    @graphql.Args()
    args: NewSubgroupInputCreate
  ): Promise<NewSubgroupInputCreate> {
    return this.service.CreateSubgroup(args);
  }

  @graphql.Mutation(() => NewSubgroupInputUnique)
  async DeleteSubgroup(
    @graphql.Args()
    args: NewSubgroupInputUnique
  ): Promise<NewSubgroupInputUnique> {
    return this.service.DeleteSubgroup(args);
  }

  @graphql.Mutation(() => NewSubgroupInputUpdate)
  async UpdateSubgroup(
    @graphql.Args()
    args: NewSubgroupInputUpdate
  ): Promise<NewSubgroupInputUpdate> {
    return this.service.UpdateSubgroup(args);
  }
}
