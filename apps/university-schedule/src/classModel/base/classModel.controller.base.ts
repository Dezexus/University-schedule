/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClassModelService } from "../classModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClassModelCreateInput } from "./ClassModelCreateInput";
import { ClassModel } from "./ClassModel";
import { ClassModelFindManyArgs } from "./ClassModelFindManyArgs";
import { ClassModelWhereUniqueInput } from "./ClassModelWhereUniqueInput";
import { ClassModelUpdateInput } from "./ClassModelUpdateInput";
import { NewClassUpdateInput } from "../NewClassUpdateInput";
import { NewClassCreateInput } from "../NewClassCreateInput";
import { NewClassWhereUniqueInput } from "../NewClassWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClassModelControllerBase {
  constructor(
    protected readonly service: ClassModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClassModel })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createClassModel(
    @common.Body() data: ClassModelCreateInput
  ): Promise<ClassModel> {
    return await this.service.createClassModel({
      data: {
        ...data,

        subject: data.subject
          ? {
              connect: data.subject,
            }
          : undefined,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,

        subgroup: data.subgroup
          ? {
              connect: data.subgroup,
            }
          : undefined,

        dayOfWeek: data.dayOfWeek
          ? {
              connect: data.dayOfWeek,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,

        subject: {
          select: {
            id: true,
          },
        },

        room: {
          select: {
            id: true,
          },
        },

        typeField: true,
        teacher: true,

        subgroup: {
          select: {
            id: true,
          },
        },

        dayOfWeek: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ClassModel] })
  @ApiNestedQuery(ClassModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async classModels(@common.Req() request: Request): Promise<ClassModel[]> {
    const args = plainToClass(ClassModelFindManyArgs, request.query);
    return this.service.classModels({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,

        subject: {
          select: {
            id: true,
          },
        },

        room: {
          select: {
            id: true,
          },
        },

        typeField: true,
        teacher: true,

        subgroup: {
          select: {
            id: true,
          },
        },

        dayOfWeek: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClassModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async classModel(
    @common.Param() params: ClassModelWhereUniqueInput
  ): Promise<ClassModel | null> {
    const result = await this.service.classModel({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        startTime: true,
        endTime: true,

        subject: {
          select: {
            id: true,
          },
        },

        room: {
          select: {
            id: true,
          },
        },

        typeField: true,
        teacher: true,

        subgroup: {
          select: {
            id: true,
          },
        },

        dayOfWeek: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClassModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateClassModel(
    @common.Param() params: ClassModelWhereUniqueInput,
    @common.Body() data: ClassModelUpdateInput
  ): Promise<ClassModel | null> {
    try {
      return await this.service.updateClassModel({
        where: params,
        data: {
          ...data,

          subject: data.subject
            ? {
                connect: data.subject,
              }
            : undefined,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,

          subgroup: data.subgroup
            ? {
                connect: data.subgroup,
              }
            : undefined,

          dayOfWeek: data.dayOfWeek
            ? {
                connect: data.dayOfWeek,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,

          subject: {
            select: {
              id: true,
            },
          },

          room: {
            select: {
              id: true,
            },
          },

          typeField: true,
          teacher: true,

          subgroup: {
            select: {
              id: true,
            },
          },

          dayOfWeek: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClassModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ClassModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteClassModel(
    @common.Param() params: ClassModelWhereUniqueInput
  ): Promise<ClassModel | null> {
    try {
      return await this.service.deleteClassModel({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          startTime: true,
          endTime: true,

          subject: {
            select: {
              id: true,
            },
          },

          room: {
            select: {
              id: true,
            },
          },

          typeField: true,
          teacher: true,

          subgroup: {
            select: {
              id: true,
            },
          },

          dayOfWeek: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/classes")
  @swagger.ApiOkResponse({
    type: NewClassCreateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateClass(
    @common.Body()
    body: NewClassUpdateInput
  ): Promise<NewClassCreateInput> {
    return this.service.CreateClass(body);
  }

  @common.Delete("/classes/:id")
  @swagger.ApiOkResponse({
    type: NewClassWhereUniqueInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async DeleteClass(
    @common.Body()
    body: NewClassUpdateInput
  ): Promise<NewClassWhereUniqueInput> {
    return this.service.DeleteClass(body);
  }

  @common.Patch("/classes/:id")
  @swagger.ApiOkResponse({
    type: NewClassUpdateInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateClass(
    @common.Body()
    body: NewClassUpdateInput
  ): Promise<NewClassUpdateInput> {
    return this.service.UpdateClass(body);
  }
}
