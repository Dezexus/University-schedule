/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ClassModel as PrismaClassModel,
  Subject as PrismaSubject,
  Room as PrismaRoom,
  Subgroup as PrismaSubgroup,
  DayOfWeek as PrismaDayOfWeek,
} from "@prisma/client";

import { NewClassCreateInput } from "../NewClassCreateInput";
import { NewClassWhereUniqueInput } from "../NewClassWhereUniqueInput";
import { NewClassUpdateInput } from "../NewClassUpdateInput";

export class ClassModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ClassModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.classModel.count(args);
  }

  async classModels(
    args: Prisma.ClassModelFindManyArgs
  ): Promise<PrismaClassModel[]> {
    return this.prisma.classModel.findMany(args);
  }
  async classModel(
    args: Prisma.ClassModelFindUniqueArgs
  ): Promise<PrismaClassModel | null> {
    return this.prisma.classModel.findUnique(args);
  }
  async createClassModel(
    args: Prisma.ClassModelCreateArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.create(args);
  }
  async updateClassModel(
    args: Prisma.ClassModelUpdateArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.update(args);
  }
  async deleteClassModel(
    args: Prisma.ClassModelDeleteArgs
  ): Promise<PrismaClassModel> {
    return this.prisma.classModel.delete(args);
  }

  async getSubject(parentId: string): Promise<PrismaSubject | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .subject();
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }

  async getSubgroup(parentId: string): Promise<PrismaSubgroup | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .subgroup();
  }

  async getDayOfWeek(parentId: string): Promise<PrismaDayOfWeek | null> {
    return this.prisma.classModel
      .findUnique({
        where: { id: parentId },
      })
      .dayOfWeek();
  }
  async CreateClass(args: NewClassCreateInput): Promise<NewClassCreateInput> {
    throw new Error("Not implemented");
  }
  async DeleteClass(
    args: NewClassWhereUniqueInput
  ): Promise<NewClassWhereUniqueInput> {
    throw new Error("Not implemented");
  }
  async UpdateClass(args: NewClassUpdateInput): Promise<NewClassUpdateInput> {
    throw new Error("Not implemented");
  }
}
