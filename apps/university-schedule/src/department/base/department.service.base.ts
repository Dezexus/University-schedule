/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Department as PrismaDepartment,
  Group as PrismaGroup,
  Subject as PrismaSubject,
} from "@prisma/client";

import { DepartmentCreateInput } from "./DepartmentCreateInput";
import { Department } from "./Department";
import { DepartmentWhereUniqueInput } from "./DepartmentWhereUniqueInput";
import { DepartmentUpdateInput } from "./DepartmentUpdateInput";

export class DepartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DepartmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.department.count(args);
  }

  async departments(
    args: Prisma.DepartmentFindManyArgs
  ): Promise<PrismaDepartment[]> {
    return this.prisma.department.findMany(args);
  }
  async department(
    args: Prisma.DepartmentFindUniqueArgs
  ): Promise<PrismaDepartment | null> {
    return this.prisma.department.findUnique(args);
  }
  async createDepartment(
    args: Prisma.DepartmentCreateArgs
  ): Promise<PrismaDepartment> {
    return this.prisma.department.create(args);
  }
  async updateDepartment(
    args: Prisma.DepartmentUpdateArgs
  ): Promise<PrismaDepartment> {
    return this.prisma.department.update(args);
  }
  async deleteDepartment(
    args: Prisma.DepartmentDeleteArgs
  ): Promise<PrismaDepartment> {
    return this.prisma.department.delete(args);
  }

  async findGroups(
    parentId: string,
    args: Prisma.GroupFindManyArgs
  ): Promise<PrismaGroup[]> {
    return this.prisma.department
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .groups(args);
  }

  async findSubjects(
    parentId: string,
    args: Prisma.SubjectFindManyArgs
  ): Promise<PrismaSubject[]> {
    return this.prisma.department
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subjects(args);
  }
  async CreateDepartment(args: DepartmentCreateInput): Promise<Department> {
    throw new Error("Not implemented");
  }
  async DeleteDepartment(
    args: DepartmentWhereUniqueInput
  ): Promise<DepartmentWhereUniqueInput> {
    throw new Error("Not implemented");
  }
  async UpdateDepartment(args: DepartmentUpdateInput): Promise<Department> {
    throw new Error("Not implemented");
  }
}
